type: edu
custom_name: stage5
files:
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.v6.stage.BaseStageTest;
    import org.hyperskill.hstest.v6.testcase.CheckResult;
    import org.hyperskill.hstest.v6.testcase.TestCase;
    import tictactoe.Main;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Random;
    import java.util.stream.Collectors;

    enum FieldState {
        X, O, FREE;

        static FieldState get(char symbol) {
            switch (symbol) {
                case 'X': return X;
                case 'O': return O;
                case ' ':
                case '_':
                    return FREE;
                default: return null;
            }
        }
    }

    class TicTacToeField {

        final FieldState[][] field;

        TicTacToeField(FieldState[][] field) {
            this.field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    this.field[row][col] = field[row][col];
                }
            }
        }

        TicTacToeField(String str) {
            field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    field[row][col] =
                        FieldState.get(str.charAt(((2 - row) * 3 + col)));
                }
            }
        }

        FieldState get(int x, int y) {
            return field[y - 1][x - 1];
        }

        boolean equalTo(TicTacToeField other) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean hasNextAs(TicTacToeField other) {
            boolean improved = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        if (field[i][j] == FieldState.FREE && !improved) {
                            improved = true;
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
            return improved;
        }

        boolean isCloseTo(TicTacToeField other) {
            return equalTo(other)
                || hasNextAs(other)
                || other.hasNextAs(this);
        }

        boolean isWinning(FieldState side) {
            if (side == FieldState.FREE) {
                return false;
            }

            if (get(1, 1) == side &&
                get(1, 2) == side &&
                get(1, 3) == side) {
                return true;
            }

            if (get(2, 1) == side &&
                get(2, 2) == side &&
                get(2, 3) == side) {
                return true;
            }

            if (get(3, 1) == side &&
                get(3, 2) == side &&
                get(3, 3) == side) {
                return true;
            }

            if (get(1, 1) == side &&
                get(2, 1) == side &&
                get(3, 1) == side) {
                return true;
            }

            if (get(1, 2) == side &&
                get(2, 2) == side &&
                get(3, 2) == side) {
                return true;
            }

            if (get(1, 3) == side &&
                get(2, 3) == side &&
                get(3, 3) == side) {
                return true;
            }

            if (get(1, 1) == side &&
                get(2, 2) == side &&
                get(3, 3) == side) {
                return true;
            }

            if (get(1, 3) == side &&
                get(2, 2) == side &&
                get(3, 1) == side) {
                return true;
            }

            return false;
        }

        boolean isDraw() {
            if (isWinning(FieldState.X) || isWinning(FieldState.O)) {
                return false;
            }
            for (int x = 1; x <= 3; x++) {
                for (int y = 1; y <= 3; y++) {
                    if (get(x, y) == FieldState.FREE) {
                        return false;
                    }
                }
            }
            return true;
        }

        static TicTacToeField parse(String fieldStr) {

            try {
                List<String> lines = fieldStr
                    .lines()
                    .map(String::strip)
                    .filter(e ->
                        e.startsWith("|")
                            && e.endsWith("|"))
                    .collect(Collectors.toList());

                for (String line : lines) {
                    for (char c : line.toCharArray()) {
                        if (c != 'X'
                            && c != 'O'
                            && c != '|'
                            && c != ' '
                            && c != '_') {
                            return null;
                        }
                    }
                }

                FieldState[][] field = new FieldState[3][3];

                int y = 2;
                for (String line : lines) {
                    char[] cols = new char[] {
                        line.charAt(2),
                        line.charAt(4),
                        line.charAt(6)
                    };

                    int x = 0;
                    for (char c : cols) {
                        FieldState state = FieldState.get(c);
                        if (state == null) {
                            return null;
                        }
                        field[y][x] = state;
                        x++;
                    }
                    y--;
                }

                return new TicTacToeField(field);
            } catch (Exception ex) {
                return null;
            }
        }


        static List<TicTacToeField> parseAll(String output) {
            List<TicTacToeField> fields = new ArrayList<>();

            List<String> lines = output
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String candidateField = "";
            boolean insideField = false;
            for (String line : lines) {
                if (line.contains("----") && !insideField) {
                    insideField = true;
                    candidateField = "";
                } else if (line.contains("----") && insideField) {
                    TicTacToeField field = TicTacToeField.parse(candidateField);
                    if (field != null) {
                        fields.add(field);
                    }
                    insideField = false;
                }

                if (insideField && line.startsWith("|")) {
                    candidateField += line + "\n";
                }
            }

            return fields;
        }

    }


    class Clue {
        int x, y;
        Clue(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    public class TicTacToeTest extends BaseStageTest<Clue> {
        public TicTacToeTest() throws Exception {
            super(Main.class);
        }

        static String[] inputs = new String[] {
            "1 1", "1 2", "1 3",
            "2 1", "2 2", "2 3",
            "3 1", "3 2", "3 3"
        };

        String iterateCells(String initial) {
            int index = -1;
            for (int i = 0; i < inputs.length; i++) {
                if (initial.equals(inputs[i])) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                return "";
            }
            String fullInput = "";
            for (int i = index; i < index + 9; i++) {
                fullInput += inputs[i % inputs.length] + "\n";
            }
            return fullInput;
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            int i = 0;
            for (String input : inputs) {

                Random random = new Random();
                String randomInput = "";
                for (int j = 0; j < 10; j++) {
                    int randX = random.nextInt(4) + 1;
                    int randY = random.nextInt(4) + 1;
                    randomInput += randX + " " + randY + "\n";
                }

                String fullMoveInput = randomInput
                    + iterateCells(input) + iterateCells(input);

                String[] strNums = input.split(" ");
                int x = Integer.parseInt(strNums[0]);
                int y = Integer.parseInt(strNums[1]);

                if (i % 2 == 1) {
                    // mix with incorrect data
                    fullMoveInput = "4 " + i + "\n" + fullMoveInput;
                }

                String fullGameInput = "";
                for (int j = 0; j < 9; j++) {
                    fullGameInput += fullMoveInput;
                }

                tests.add(new TestCase<Clue>()
                    .setInput(fullGameInput)
                    .setAttach(new Clue(x, y)));

                i++;
            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<TicTacToeField> fields = TicTacToeField.parseAll(reply);

            if (fields.size() == 0) {
                return new CheckResult(false, "No fields found");
            }

            for (int i = 1; i < fields.size(); i++) {
                TicTacToeField curr = fields.get(i - 1);
                TicTacToeField next = fields.get(i);

                if (!(curr.equalTo(next) || curr.hasNextAs(next))) {
                    return new CheckResult(false,
                        "For two fields following each " +
                            "other one is not a continuation " +
                            "of the other (they differ more than in two places).");
                }
            }

            List<String> lines = reply
                .strip()
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String lastLine = lines.get(lines.size() - 1);

            if (! (lastLine.contains("X wins")
                || lastLine.contains("O wins")
                || lastLine.contains("Draw")
            )) {
                return new CheckResult(false,
                    "Can't parse final result, " +
                        "should contain \"Draw\", \"X wins\" or \"O wins\".\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastLine.contains("X wins") && lastLine.contains("O wins")) {
                return new CheckResult(false,
                    "Your final result contains \"X wins\" and \"O wins\" " +
                        "at the same time. This is impossible.\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastLine.contains("X wins") && lastLine.contains("Draw")) {
                return new CheckResult(false,
                    "Your final result contains \"X wins\" and \"Draw\" " +
                        "at the same time. This is impossible.\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastLine.contains("O wins") && lastLine.contains("Draw")) {
                return new CheckResult(false,
                    "Your final result contains \"O wins\" and \"Draw\" " +
                        "at the same time. This is impossible.\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            TicTacToeField lastField = fields.get(fields.size() - 1);

            if (lastField.isWinning(FieldState.X) && !lastLine.contains("X wins")) {
                return new CheckResult(false,
                    "Your last field shows that X wins, " +
                        "and your last line should contain \"X wins\".\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastField.isWinning(FieldState.O) && !lastLine.contains("O wins")) {
                return new CheckResult(false,
                    "Your last field shows that O wins, " +
                        "and your last line should contain \"O wins\".\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastField.isDraw() && !lastLine.contains("Draw")) {
                return new CheckResult(false,
                    "Your last field shows that there is a draw, " +
                        "and your last line should contain \"Draw\".\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastField.isWinning(FieldState.X) ||
                lastField.isWinning(FieldState.O) ||
                lastField.isDraw()) {
                return CheckResult.TRUE;
            }

            return CheckResult.FALSE(
                "Your last field contains unfinished game, the game should be finished!"
            );
        }
    }
  learner_created: false
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: src/tictactoe/Game.java
  visible: true
  text: |
    package tictactoe;

    public class Game {

        private Move playerOne;
        private Move playerTwo;

        private Board board;

        private GameState state = GameState.NOT_FINISHED;

        public Game(Board board) {
            this.board = board;
        }

        public Board getBoard() {
            return board;
        }


        public GameState validate() {
            Validator validator = new Validator(getBoard());

            boolean wonX = validator.isWinner(Move.X);
            boolean wonY = validator.isWinner(Move.O);

            if(wonX && wonY)
                switchState(GameState.IMPOSSIBLE);
            else if (wonX)
                switchState(GameState.X_WINS);
            else if(wonY)
                switchState(GameState.O_WINS);
            else if(validator.hasEmptyCells()) {
                switchState(GameState.NOT_FINISHED);
            }
            else
                switchState(GameState.DRAW);

            return this.getState();
        }


        public void switchState(GameState newState) {
            this.state = newState;
        }

        public GameState getState() {
            return state;
        }
    }
  learner_created: false
- name: src/tictactoe/Board.java
  visible: true
  text: |
    package tictactoe;

    public class Board {

        private char[][] data = new char[3][3];

        /**
         * Load board
         * @param chars
         */
        public void load(char[] chars) {
            int countX = 0;
            int countY = 0;

            int charIndexStartsFrom = 0; //Can be 0 - 3 - 6 to correctly place elements in 3x3 matrix
            for (int row = 0; row < data.length; row++) {
                char[] columns = data[row];
                for (int col = 0; col < columns.length; col++) {
                    char anInput = chars[charIndexStartsFrom + col];
                    columns[col] = anInput;

                    if(anInput == Move.X)
                        countX++;
                    else if(anInput == Move.O)
                        countY++;

                }
                charIndexStartsFrom += 3;
            }

            if(Math.abs(countX - countY) > 1) {
                throw new IllegalArgumentException("Too many moves for a player: " + chars);
            }
        }



        public void draw() {
            System.out.println("---------");
            for (int i = 0; i < data.length; i++) {
                System.out.print("| ");
                for (int col = 0; col < data[i].length; col++) {
                    if(data[i][col] == '_')
                        System.out.print( " " + " ");
                    else
                        System.out.print(data[i][col] + " ");
                }
                System.out.println("|");
            }
            System.out.println("---------");
        }

        public char[][] getData() {
            return data;
        }

        public void setCell(char c, int x, int y) throws CellAlreadyOccupiedException {
            if(x < 1 || x > 3)
                throw new IllegalArgumentException();
            if(y < 1 || y > 3)
                throw new IllegalArgumentException();

            int convertedX = x - 1;
            int convertedY = data.length - y;

            if(data[convertedY][convertedX] != Move.EMPTY) {
                throw new CellAlreadyOccupiedException();
            }

            data[convertedY][convertedX] = c;
        }
    }
  learner_created: false
- name: src/tictactoe/GameState.java
  visible: true
  text: |
    package tictactoe;

    public enum GameState {

        NOT_FINISHED("Game not finished"),
        DRAW("Draw"),
        X_WINS("X wins"),
        O_WINS("O wins"),
        IMPOSSIBLE("Impossible");


        private final String message;

        GameState(String s) {
            this.message = s;
        }

        @Override
        public String toString() {
            return message;
        }
    }
  learner_created: false
- name: src/tictactoe/Move.java
  visible: true
  text: |
    package tictactoe;

    public interface Move {
        char X = 'X';
        char O = 'O';
        char EMPTY = '_';
    }
  learner_created: false
- name: src/tictactoe/CellAlreadyOccupiedException.java
  visible: true
  text: |
    package tictactoe;

    public class CellAlreadyOccupiedException extends Throwable {

    }
  learner_created: false
- name: src/tictactoe/GameRule.java
  visible: true
  text: |
    package tictactoe;

    public class GameRule {
        private final Board board;

        public GameRule(Board b) {
            this.board = b;
        }


        public boolean isWinner(char x) {
            return findRowMatch(x) || findColumnMatch(x) || findDiagonalMatch(x);
        }

        private boolean findColumnMatch(char x) {
            char[][] data = board.getData();
            for (int i = 0; i < data.length; i++) {
                if (data[0][i] == x && data[1][i] == x && data[2][i] == x) {
                    return true;
                }
            }
            return false;
        }

        private boolean findRowMatch(char x) {
            char[][] data = board.getData();
            for (int i = 0; i < data.length; i++) {
                if (data[i][0] == x && data[i][1] == x && data[i][2] == x) {
                    return true;
                }
            }
            return false;
        }

        private boolean findDiagonalMatch(char x) {
            char[][] data = board.getData();

            int countD1 = 0;
            int countD2 = 0;

            for (int i = 0, j = 0; i < data.length; i++, j++) {
                if (data[i][j] == x)
                    countD1++;
            }

            //check diagonal left
            for (int i = data.length - 1, j = 0; i >= 0; i--, j++) {
                if (data[i][j] == x)
                    countD2++;
            }

            return countD1 == 3 || countD2 == 3;
        }

        public boolean hasEmptyCells() {
            char[][] data = board.getData();
            for (int i = 0; i < data.length; i++) {
                char[] row = data[i];
                for (int col = 0; col < row.length; col++) {
                    if(row[col] == Move.EMPTY)
                        return true;
                }
            }
            return false;
        }
    }
  learner_created: true
- name: src/tictactoe/Coordinate.java
  visible: true
  text: |
    package tictactoe;

    public class Coordinate {
        int x, y;

        Coordinate(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }
  learner_created: true
- name: src/tictactoe/MainFede.java
  visible: true
  text: |
    package tictactoe;

    import java.util.NoSuchElementException;
    import java.util.Scanner;

    public class MainFede {
        static char[][] grid = {{' ', ' ', ' '}, {' ', ' ', ' '}, {' ', ' ', ' '}};
        public static void main(String[] args) {
            Scanner s = new Scanner(System.in);
            // System.out.print("Enter cells: ");
            //String line = s.nextLine();
            //setGrid(line);
            displayGrid();
            boolean exit = true;
            boolean playerX = true;
            while (exit) {
                System.out.print("Enter the coordinates: ");
                try {
                    int x = s.nextInt();
                    int y = s.nextInt();
                    setBlock(x, y, playerX ? 'X' : 'O');
                    playerX = !playerX;
                } catch (IllegalAccessException e) {
                    System.out.println("Coordinates should be from 1 to 3!");
                } catch (IllegalArgumentException e) {
                    System.out.println("This cell is occupied! Choose another one!");
                } catch (NoSuchElementException e) {
                    System.out.println("You should enter numbers!");
                }
                displayGrid();
                char winner = getWinner();
                if (winner != ' ') {
                    System.out.println(winner + " wins");
                    exit = false;
                } else {
                    if (!hasEmpty()) {
                        System.out.println(winner + "Draw");
                        exit = false;
                    }
                }
            }
        }
        private static void setBlock(int y, int x, char c) throws IllegalAccessException {
            x = 3 - x;
            y--;
            //System.out.println(x +" "+ y);
            if (!(x >= 0 && x < 3 && y >= 0 && y < 3)) throw new IllegalAccessException();
            if (grid[x][y] != ' ') throw new IllegalArgumentException();
            grid[x][y] = c;
        }
        static void displayGrid() {
            System.out.println("---------");
            for (int i = 0; i < 3; i++) {
                System.out.print("|");
                for (int j = 0; j < 3; j++) {
                    System.out.print(" ");
                    System.out.print(grid[i][j]);
                    //System.out.print(" ");
                }
                System.out.println(" |");
            }
            System.out.println("---------");
        }
        static char checkRow(int i) {
            int cX = 0;
            int cO = 0;
            for (int j = 0; j < 3; j++) {
                if (grid[i][j] == 'X') cX++;
                if (grid[i][j] == 'O') cO++;
            }
            if (cX == 3) return 'X';
            if (cO == 3) return 'O';
            return ' ';
        }
        static char checkCol(int j) {
            int cX = 0;
            int cO = 0;
            for (int i = 0; i < 3; i++) {
                if (grid[i][j] == 'X') cX++;
                if (grid[i][j] == 'O') cO++;
            }
            if (cX == 3) return 'X';
            if (cO == 3) return 'O';
            return ' ';
        }
        static char checkDiag1() {
            int cX = 0;
            int cO = 0;
            for (int i = 0; i < 3; i++) {
                if (grid[i][i] == 'X') cX++;
                if (grid[i][i] == 'O') cO++;
            }
            if (cX == 3) return 'X';
            if (cO == 3) return 'O';
            return ' ';
        }
        static char checkDiag2() {
            int cX = 0;
            int cO = 0;
            for (int i = 0; i < 3; i++) {
                if (grid[i][2 - i] == 'X') cX++;
                if (grid[i][2 - i] == 'O') cO++;
            }
            if (cX == 3) return 'X';
            if (cO == 3) return 'O';
            return ' ';
        }
        static char getWinner() {
            char[] results =
                    {checkCol(0), checkCol(1), checkCol(2), checkDiag1(),
                            checkRow(0), checkRow(1), checkRow(2), checkDiag2()};
            char winner = ' ';
            for (int i = 0; i < 8; i++) {
                for (int j = 0; j < 4; j++) {
                    if (results[i] != ' ')
                        winner = results[i];
                }
            }
            return winner;
        }
        static boolean hasEmpty() {
            int xCounter = 0;
            boolean result = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (grid[i][j] == ' ') result = true;
                    if (grid[i][j] == 'X') xCounter++;
                    if (grid[i][j] == 'O') xCounter--;
                }
            }
            //if (Math.abs(xCounter) > 1) throw new IllegalStateException();
            return result;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/48/stages/259/implement
status: Solved
record: 5
